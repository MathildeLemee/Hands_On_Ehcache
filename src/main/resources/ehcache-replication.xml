<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="ehcache.xsd">

  <!--
  Configuring JMS replication.
  ===========================

  <cacheManagerPeerProviderFactory
          class="net.sf.ehcache.distribution.jms.JMSCacheManagerPeerProviderFactory"
          properties="..."
          propertySeparator=","
          />

  The JMS PeerProviderFactory uses JNDI to maintain message queue independence. Refer to the manual for full configuration
  examples using ActiveMQ and Open Message Queue.

  Valid properties are:
  * initialContextFactoryName (mandatory) - the name of the factory used to create the message queue initial context.
  * providerURL (mandatory) - the JNDI configuration information for the service provider to use.
  * replicationTopicConnectionFactoryBindingName (mandatory) - the JNDI binding name for the replication TopicConnectionFactory
  * replicationTopicBindingName (mandatory) - the JNDI binding name for the topic name used for replication
  * securityPrincipalName - the JNDI java.naming.security.principal
  * securityCredentials - the JNDI java.naming.security.credentials
  * urlPkgPrefixes - the JNDI java.naming.factory.url.pkgs
  * userName - the user name to use when creating the TopicConnection to the Message Queue
  * password - the password to use when creating the TopicConnection to the Message Queue
  * acknowledgementMode - the JMS Acknowledgement mode for both publisher and subscriber. The available choices are
                          AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE and SESSION_TRANSACTED. The default is AUTO_ACKNOWLEDGE.

  This peer provider can also respond to JMSCacheLoader requests. Add the following properties to do so:
  * getQueueBindingName (mandatory only if using jmsCacheLoader) - the JNDI binding name for the queue name used to do gets
  * getQueueConnectionFactoryBindingName (mandatory only if using jmsCacheLoader) -
          the JNDI binding name for the QueueConnectionFactory


  JMS Cache Loader
  ================

  The JMSCacheLoader is a CacheLoader which loads objects into the cache by sending requests to a JMS Queue.

  The loader places an ObjectMessage of type JMSEventMessage on the getQueue with an Action of type GET.

  It is configured with the following String properties:

  * loaderArgument - the defaultLoaderArgument, or the loaderArgument if specified on the
   load request. To work with the JMSCacheManagerPeerProvider this should be the name of the cache to load from.
   For custom responders, it can be anything which has meaning to the responder.

  A queue responder will respond to the request. You can either create your own or use the one built-into
  the JMSCacheManagerPeerProviderFactory, which attempts to load the queue from its cache.

  See the documentation for details on how to write a responder.

  The JMSCacheLoader uses JNDI to maintain message queue independence. Refer to the manual for full configuration
  examples using ActiveMQ and Open Message Queue.

  It is configured as per the following example:

  <cacheLoaderFactory class="net.sf.ehcache.distribution.jms.JMSCacheLoaderFactory"
                      properties="initialContextFactoryName=com.sun.jndi.fscontext.RefFSContextFactory,
          providerURL=file:///tmp,
          replicationTopicConnectionFactoryBindingName=MyConnectionFactory,
          replicationTopicBindingName=ehcache,
          getQueueConnectionFactoryBindingName=queueConnectionFactory,
          getQueueBindingName=ehcacheGetQueue,
          timeoutMillis=20000
          defaultLoaderArgument=/>

  Valid properties are:
  * initialContextFactoryName (mandatory) - the name of the factory used to create the message queue initial context.
  * providerURL (mandatory) - the JNDI configuration information for the service provider to use.
  * getQueueConnectionFactoryBindingName (mandatory) - the JNDI binding name for the QueueConnectionFactory
  * getQueueBindingName (mandatory) - the JNDI binding name for the queue name used to do make requests.
  * defaultLoaderArgument - (optional) - an application specific argument. If not supplied as a cache.load() parameter
  this default value will be used. The argument is passed in the JMS request as a StringProperty called loaderArgument.
  * timeoutMillis - time in milliseconds to wait for a reply.
  * securityPrincipalName - the JNDI java.naming.security.principal
  * securityCredentials - the JNDI java.naming.security.credentials
  * urlPkgPrefixes - the JNDI java.naming.factory.url.pkgs
  * userName - the user name to use when creating the TopicConnection to the Message Queue
  * password - the password to use when creating the TopicConnection to the Message Queue
  * acknowledgementMode - the JMS Acknowledgement mode for both publisher and subscriber. The available choices are
                          AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE and SESSION_TRANSACTED. The default is AUTO_ACKNOWLEDGE.
  * listenToTopic - true or false. If false, this CacheManager will not listen for replication updates. Default is true.
  -->
  <cacheManagerPeerProviderFactory
      class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
      properties="peerDiscovery=automatic,
                        multicastGroupAddress=230.0.0.1,
                        multicastGroupPort=4446, timeToLive=0"
      propertySeparator=","
      />

  <cacheManagerPeerProviderFactory
      class="net.sf.ehcache.distribution.jms.JMSCacheManagerPeerProviderFactory"
      properties="initialContextFactoryName=org.coenraets.replication.TestActiveMQInitialContextFactory,
                providerURL=tcp://localhost:61616,
                replicationTopicConnectionFactoryBindingName=topicConnectionFactory,
                getQueueConnectionFactoryBindingName=queueConnectionFactory,
                replicationTopicBindingName=ehcache,
                getQueueBindingName=ehcacheGetQueue,
                listenToTopic=true"
      propertySeparator=","
      />



  <cacheManagerPeerListenerFactory
      class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"/>

  <defaultCache
      maxElementsInMemory="10000"
      eternal="false"
      timeToIdleSeconds="120"
      timeToLiveSeconds="120"
      overflowToDisk="false"
      memoryStoreEvictionPolicy="FIFO">
  </defaultCache>


  <cache name="sampleCacheAsync"
         maxElementsInMemory="1000"
         eternal="false"
         timeToIdleSeconds="1000"
         timeToLiveSeconds="1000"
         overflowToDisk="false">
    <cacheEventListenerFactory class="net.sf.ehcache.distribution.jms.JMSCacheReplicatorFactory"
                               properties="replicateAsynchronously=true,
                                                replicatePuts=true,
                                                replicateUpdates=true,
                                                replicateUpdatesViaCopy=true,
                                                replicateRemovals=true,
                                                asynchronousReplicationIntervalMillis=500"
                               propertySeparator=","/>
  </cache>


  <cache name="sampleCacheSync"
         maxElementsInMemory="10000"
         eternal="false"
         timeToIdleSeconds="120"
         timeToLiveSeconds="120"
         overflowToDisk="false"
         memoryStoreEvictionPolicy="FIFO">
    <cacheEventListenerFactory class="net.sf.ehcache.distribution.jms.JMSCacheReplicatorFactory"
                               properties="replicateAsynchronously=false,
                                                 replicatePuts=true,
                                                 replicateUpdates=true,
                                                 replicateUpdatesViaCopy=true,
                                                 replicateRemovals=true"
                               propertySeparator=","/>
  </cache>

  <cache name="sampleCacheNorep"
         maxElementsInMemory="1000"
         eternal="false"
         timeToIdleSeconds="1000"
         timeToLiveSeconds="1000"
         overflowToDisk="false">
    <cacheEventListenerFactory class="net.sf.ehcache.distribution.jms.JMSCacheReplicatorFactory"
                               properties="replicateAsynchronously=false, replicatePuts=false,
                                     replicateUpdates=false, replicateUpdatesViaCopy=false,
                                     replicateRemovals=false, loaderArgument=sampleCacheNorep"
                               propertySeparator=","/>
    <cacheLoaderFactory class="net.sf.ehcache.distribution.jms.JMSCacheLoaderFactory"
                        properties="initialContextFactoryName=org.coenraets.replication.TestActiveMQInitialContextFactory,
                providerURL=tcp://localhost:61616,
                getQueueConnectionFactoryBindingName=queueConnectionFactory,
                getQueueBindingName=ehcacheGetQueue,
                timeoutMillis=10000"/>
  </cache>

  <cache name="sampleJMSReplicateRMIBootstrap"
         maxElementsInMemory="1000"
         eternal="false"
         timeToIdleSeconds="1000"
         timeToLiveSeconds="1000"
         overflowToDisk="false">
    <cacheEventListenerFactory class="net.sf.ehcache.distribution.jms.JMSCacheReplicatorFactory"
                               properties="replicateAsynchronously=true,
                                                replicatePuts=true,
                                                replicateUpdates=true,
                                                replicateUpdatesViaCopy=true,
                                                replicateRemovals=true,
                                                asynchronousReplicationIntervalMillis=1000"
                               propertySeparator=","/>
    <bootstrapCacheLoaderFactory
        class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"
        properties="bootstrapAsynchronously=true, maximumChunkSizeBytes=5000000"
        propertySeparator=","/>
  </cache>


</ehcache>
